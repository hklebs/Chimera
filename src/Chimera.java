/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
import java.awt.*;
import java.util.ArrayList;
import javax.swing.*;
/**
 *
 * @author Hudson and Bryan
 */
public class Chimera extends javax.swing.JFrame {

    /**
     * Creates new form Chimera
     */
    
    public Chimera() {
        initComponents();
    }
    
    // Animals
    Animal goldenRetriever = new Animal("Dog", "Golden Retriever", 15, 25, 10);
    Animal beagle = new Animal("Dog", "Beagle", 20, 20, 15);
    Animal siamese = new Animal("Cat", "Siamese", 13, 15, 10);
    Animal calico = new Animal("Cat", "Calico", 14, 17, 12);
    Animal rabbit = new Animal("Rabbit", "Bunny", 10, 10, 8);
    Animal elephant = new Animal("Elephant", "African", 100, 120, 90);
    Animal blackBear = new Animal("Bear", "Black Bear", 80, 100, 80);
    Animal polarBear = new Animal("Bear", "Polar Bear", 90, 110, 90);
    
    // current state
    ChimeraCreation current = 
            new ChimeraCreation(goldenRetriever,
                                goldenRetriever,
                                goldenRetriever,
                                "Docile",
                                "Medium",
                                new ArrayList<Skill>());
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        personalityDialog = new javax.swing.JDialog();
        jRadioButton3 = new javax.swing.JRadioButton();
        docileRadioButton = new javax.swing.JRadioButton();
        jRadioButton1 = new javax.swing.JRadioButton();
        jButton3 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        personalityButtonGroup = new javax.swing.ButtonGroup();
        CardPanel = new javax.swing.JPanel();
        ChimeraEntryPanel = new javax.swing.JPanel();
        ChimeraWelcomePanel = new javax.swing.JPanel();
        ChimeraLogoPanel = new javax.swing.JPanel();
        ChimeraNameLabel = new javax.swing.JLabel();
        ChimeraChoosePanel = new javax.swing.JPanel();
        BufferPanel = new javax.swing.JPanel();
        BufferLabel = new javax.swing.JLabel();
        ChooseTextPanel = new javax.swing.JPanel();
        ChooseLabel = new javax.swing.JLabel();
        BaseAnimalChoicePanel = new javax.swing.JPanel();
        DogButton = new javax.swing.JButton();
        CatButton = new javax.swing.JButton();
        RabbitButton = new javax.swing.JButton();
        ElephantButton = new javax.swing.JButton();
        BearButton = new javax.swing.JButton();
        ChimeraDesignPanel = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        designPanel = new javax.swing.JPanel();
        AnimalViewPanel = new javax.swing.JPanel();
        AnimalViewHeadPanel = new javax.swing.JPanel();
        AnimalViewHeadLabel = new javax.swing.JLabel();
        AnimalViewTorsoPanel = new javax.swing.JPanel();
        AnimalViewTorsoLabel = new javax.swing.JLabel();
        AnimalViewLegsPanel = new javax.swing.JPanel();
        AnimalViewLegsLabel = new javax.swing.JLabel();
        ChangeAnimalRightPanel = new javax.swing.JPanel();
        ChangeHeadRightButton = new javax.swing.JButton();
        ChangeTorsoRightButton = new javax.swing.JButton();
        ChangeLegsRightButton = new javax.swing.JButton();
        ChangeAnimalLeftPanel = new javax.swing.JPanel();
        ChangeHeadLeftButton = new javax.swing.JButton();
        ChangeTorsoLeftButton = new javax.swing.JButton();
        ChangeLegsLeftButton = new javax.swing.JButton();
        personalityPanel = new javax.swing.JPanel();
        skillsPanel = new javax.swing.JPanel();
        tricksjPanel = new javax.swing.JPanel();
        trickColumnTitlePanel = new javax.swing.JPanel();
        trickColumnLabel = new javax.swing.JLabel();
        sitPanel = new javax.swing.JPanel();
        jPanel9 = new javax.swing.JPanel();
        sitCheckBox = new javax.swing.JCheckBox();
        jPanel10 = new javax.swing.JPanel();
        sitPriceLabel = new javax.swing.JLabel();
        stayPanel = new javax.swing.JPanel();
        jPanel11 = new javax.swing.JPanel();
        stayCheckBox = new javax.swing.JCheckBox();
        jPanel14 = new javax.swing.JPanel();
        stayPriceLabel = new javax.swing.JLabel();
        comePanel = new javax.swing.JPanel();
        jPanel15 = new javax.swing.JPanel();
        comeCheckBox = new javax.swing.JCheckBox();
        jPanel16 = new javax.swing.JPanel();
        comePriceLabel = new javax.swing.JLabel();
        shakeHandsPanel = new javax.swing.JPanel();
        jPanel17 = new javax.swing.JPanel();
        shakeHandsCheckBox = new javax.swing.JCheckBox();
        jPanel18 = new javax.swing.JPanel();
        shakeHandsPriceLabel = new javax.swing.JLabel();
        playDeadPanel = new javax.swing.JPanel();
        jPanel19 = new javax.swing.JPanel();
        playDeadCheckBox = new javax.swing.JCheckBox();
        jPanel20 = new javax.swing.JPanel();
        playDeadPriceLabel = new javax.swing.JLabel();
        trainingPanel = new javax.swing.JPanel();
        trainingColumnTitlePanel = new javax.swing.JPanel();
        trainingColumnLabel = new javax.swing.JLabel();
        therapyPanel = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        therapyCheckBox = new javax.swing.JCheckBox();
        jPanel1 = new javax.swing.JPanel();
        therapyPriceLabel = new javax.swing.JLabel();
        agilityPanel = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        agilityCheckBox = new javax.swing.JCheckBox();
        jPanel4 = new javax.swing.JPanel();
        agilityPriceLabel = new javax.swing.JLabel();
        seeingPanel = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        seeingCheckBox = new javax.swing.JCheckBox();
        jPanel6 = new javax.swing.JPanel();
        seeingPriceLabel = new javax.swing.JLabel();
        comfortPanel = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        comfortCheckBox = new javax.swing.JCheckBox();
        jPanel8 = new javax.swing.JPanel();
        comfortPrice = new javax.swing.JLabel();
        jPanel12 = new javax.swing.JPanel();
        jPanel21 = new javax.swing.JPanel();
        jCheckBox14 = new javax.swing.JCheckBox();
        jPanel22 = new javax.swing.JPanel();
        jLabel13 = new javax.swing.JLabel();
        breedPanel = new javax.swing.JPanel();
        breedHeadPanel = new javax.swing.JPanel();
        breedHeadLabel = new javax.swing.JLabel();
        breedHeadSelectPanel = new javax.swing.JPanel();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jPanel24 = new javax.swing.JPanel();
        breedTorsoPanel = new javax.swing.JPanel();
        breedTorsoLabel = new javax.swing.JLabel();
        breedTorsoSelectPanel = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jPanel23 = new javax.swing.JPanel();
        jButton4 = new javax.swing.JButton();
        breedLegsPanel = new javax.swing.JPanel();
        breedLegsLabel = new javax.swing.JLabel();
        breedLegsSelectPanel = new javax.swing.JPanel();
        breedLegsLeftButton = new javax.swing.JButton();
        jPanel13 = new javax.swing.JPanel();
        breedLegsRightButton = new javax.swing.JButton();
        cartPanel = new javax.swing.JPanel();
        cartScrollPanel = new javax.swing.JScrollPane();
        itemsPanel = new javax.swing.JPanel();
        CartHeadPanel = new javax.swing.JPanel();
        headLabel = new javax.swing.JLabel();
        headSpaceFiller = new javax.swing.JLabel();
        headChoiceLabel = new javax.swing.JLabel();
        headPriceLabel = new javax.swing.JLabel();
        headBreedTitleLabel = new javax.swing.JLabel();
        headBreedLabel = new javax.swing.JLabel();
        CartTorsoPanel = new javax.swing.JPanel();
        torsoLabel = new javax.swing.JLabel();
        torsoSpaceFiller = new javax.swing.JLabel();
        torsoChoiceLabel = new javax.swing.JLabel();
        torsoPriceLabel = new javax.swing.JLabel();
        torsoBreedTitleLabel = new javax.swing.JLabel();
        torsoBreedLabel = new javax.swing.JLabel();
        CartLegsPanel = new javax.swing.JPanel();
        legsLabel = new javax.swing.JLabel();
        legsSpaceFiller = new javax.swing.JLabel();
        legsChoiceLabel = new javax.swing.JLabel();
        legsPriceLabel = new javax.swing.JLabel();
        legsBreedTitleLabel = new javax.swing.JLabel();
        legsBreedLabel = new javax.swing.JLabel();
        CartTricksPanel = new javax.swing.JPanel();
        tricksLabel = new javax.swing.JLabel();
        tricksPriceLabel = new javax.swing.JLabel();
        tricksListPanel = new javax.swing.JPanel();
        totalPanel = new javax.swing.JPanel();
        totalLabel = new javax.swing.JLabel();
        totalPriceLabel = new javax.swing.JLabel();

        personalityDialog.setTitle("Personality Chooser");
        personalityDialog.setBounds(new java.awt.Rectangle(0, 0, 120, 40));
        personalityDialog.getContentPane().setLayout(new java.awt.FlowLayout());

        personalityButtonGroup.add(jRadioButton3);
        jRadioButton3.setText("Protective");
        personalityDialog.getContentPane().add(jRadioButton3);

        personalityButtonGroup.add(docileRadioButton);
        docileRadioButton.setText("Docile");
        docileRadioButton.setSelected(true);
        personalityDialog.getContentPane().add(docileRadioButton);

        personalityButtonGroup.add(jRadioButton1);
        jRadioButton1.setText("Aggressive");
        personalityDialog.getContentPane().add(jRadioButton1);

        jButton3.setText("Close");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        personalityDialog.getContentPane().add(jButton3);

        personalityDialog.pack();

        jButton2.setText("jButton2");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(980, 616));

        CardPanel.setLayout(new java.awt.CardLayout());

        ChimeraEntryPanel.setLayout(new java.awt.GridLayout(2, 1));

        ChimeraWelcomePanel.setLayout(new java.awt.GridLayout(2, 1));

        ChimeraNameLabel.setFont(new java.awt.Font("Comic Sans MS", 0, 48)); // NOI18N
        ChimeraNameLabel.setText("Chimera");
        ChimeraLogoPanel.add(ChimeraNameLabel);

        ChimeraWelcomePanel.add(ChimeraLogoPanel);

        ChimeraChoosePanel.setLayout(new java.awt.GridLayout(2, 1));

        BufferLabel.setText("----------------");
        BufferPanel.add(BufferLabel);

        ChimeraChoosePanel.add(BufferPanel);

        ChooseLabel.setFont(new java.awt.Font("Comic Sans MS", 0, 14)); // NOI18N
        ChooseLabel.setText("Choose Your Base Animal:");
        ChooseTextPanel.add(ChooseLabel);

        ChimeraChoosePanel.add(ChooseTextPanel);

        ChimeraWelcomePanel.add(ChimeraChoosePanel);

        ChimeraEntryPanel.add(ChimeraWelcomePanel);

        BaseAnimalChoicePanel.setLayout(new java.awt.GridLayout(1, 5));

        DogButton.setText("Dog");
        DogButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                DogButtonMouseClicked(evt);
            }
        });
        BaseAnimalChoicePanel.add(DogButton);

        CatButton.setText("Cat");
        CatButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                CatButtonMouseClicked(evt);
            }
        });
        BaseAnimalChoicePanel.add(CatButton);

        RabbitButton.setText("Rabbit");
        RabbitButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                RabbitButtonMouseClicked(evt);
            }
        });
        BaseAnimalChoicePanel.add(RabbitButton);

        ElephantButton.setText("Elephant");
        ElephantButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ElephantButtonMouseClicked(evt);
            }
        });
        BaseAnimalChoicePanel.add(ElephantButton);

        BearButton.setText("Bear");
        BearButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                BearButtonMouseClicked(evt);
            }
        });
        BaseAnimalChoicePanel.add(BearButton);

        ChimeraEntryPanel.add(BaseAnimalChoicePanel);

        CardPanel.add(ChimeraEntryPanel, "card3");

        ChimeraDesignPanel.setLayout(new java.awt.BorderLayout());

        jTabbedPane1.setPreferredSize(new java.awt.Dimension(400, 202));

        designPanel.setLayout(new java.awt.BorderLayout());

        AnimalViewPanel.setLayout(new java.awt.GridLayout(3, 1));

        AnimalViewHeadLabel.setText("Dog");
        AnimalViewHeadPanel.add(AnimalViewHeadLabel);

        AnimalViewPanel.add(AnimalViewHeadPanel);

        AnimalViewTorsoLabel.setText("Dog");
        AnimalViewTorsoPanel.add(AnimalViewTorsoLabel);

        AnimalViewPanel.add(AnimalViewTorsoPanel);

        AnimalViewLegsLabel.setText("Dog");
        AnimalViewLegsPanel.add(AnimalViewLegsLabel);

        AnimalViewPanel.add(AnimalViewLegsPanel);

        designPanel.add(AnimalViewPanel, java.awt.BorderLayout.CENTER);

        ChangeAnimalRightPanel.setLayout(new java.awt.GridLayout(3, 1));

        ChangeHeadRightButton.setText("---->");
        ChangeHeadRightButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ChangeHeadRightButtonMouseClicked(evt);
            }
        });
        ChangeAnimalRightPanel.add(ChangeHeadRightButton);

        ChangeTorsoRightButton.setText("---->");
        ChangeTorsoRightButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ChangeTorsoRightButtonMouseClicked(evt);
            }
        });
        ChangeTorsoRightButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ChangeTorsoRightButtonActionPerformed(evt);
            }
        });
        ChangeAnimalRightPanel.add(ChangeTorsoRightButton);

        ChangeLegsRightButton.setText("---->");
        ChangeLegsRightButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ChangeLegsRightButtonMouseClicked(evt);
            }
        });
        ChangeAnimalRightPanel.add(ChangeLegsRightButton);

        designPanel.add(ChangeAnimalRightPanel, java.awt.BorderLayout.LINE_END);

        ChangeAnimalLeftPanel.setLayout(new java.awt.GridLayout(3, 1));

        ChangeHeadLeftButton.setText("<----");
        ChangeHeadLeftButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ChangeHeadLeftButtonMouseClicked(evt);
            }
        });
        ChangeAnimalLeftPanel.add(ChangeHeadLeftButton);

        ChangeTorsoLeftButton.setText("<----");
        ChangeTorsoLeftButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ChangeTorsoLeftButtonMouseClicked(evt);
            }
        });
        ChangeAnimalLeftPanel.add(ChangeTorsoLeftButton);

        ChangeLegsLeftButton.setText("<----");
        ChangeLegsLeftButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ChangeLegsLeftButtonMouseClicked(evt);
            }
        });
        ChangeAnimalLeftPanel.add(ChangeLegsLeftButton);

        designPanel.add(ChangeAnimalLeftPanel, java.awt.BorderLayout.LINE_START);

        jTabbedPane1.addTab("Design", designPanel);

        personalityPanel.setLayout(new java.awt.BorderLayout());
        jTabbedPane1.addTab("Personality", personalityPanel);

        skillsPanel.setLayout(new java.awt.GridLayout(1, 2));

        tricksjPanel.setLayout(new java.awt.GridLayout(6, 1));

        trickColumnLabel.setText("Tricks");
        trickColumnTitlePanel.add(trickColumnLabel);

        tricksjPanel.add(trickColumnTitlePanel);

        sitPanel.setLayout(new java.awt.GridLayout(1, 2));

        sitCheckBox.setText("Sit");
        sitCheckBox.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                sitCheckBoxMouseClicked(evt);
            }
        });
        jPanel9.add(sitCheckBox);

        sitPanel.add(jPanel9);

        sitPriceLabel.setText("$15.00");
        jPanel10.add(sitPriceLabel);

        sitPanel.add(jPanel10);

        tricksjPanel.add(sitPanel);

        stayPanel.setLayout(new java.awt.GridLayout());

        stayCheckBox.setText("Stay");
        stayCheckBox.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                stayCheckBoxMouseClicked(evt);
            }
        });
        stayCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stayCheckBoxActionPerformed(evt);
            }
        });
        jPanel11.add(stayCheckBox);

        stayPanel.add(jPanel11);

        stayPriceLabel.setText("$15.00");
        jPanel14.add(stayPriceLabel);

        stayPanel.add(jPanel14);

        tricksjPanel.add(stayPanel);

        comePanel.setLayout(new java.awt.GridLayout());

        comeCheckBox.setText("Come");
        comeCheckBox.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                comeCheckBoxMouseClicked(evt);
            }
        });
        jPanel15.add(comeCheckBox);

        comePanel.add(jPanel15);

        comePriceLabel.setText("$20.00");
        jPanel16.add(comePriceLabel);

        comePanel.add(jPanel16);

        tricksjPanel.add(comePanel);

        shakeHandsPanel.setLayout(new java.awt.GridLayout());

        shakeHandsCheckBox.setText("Shake Hands");
        shakeHandsCheckBox.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                shakeHandsCheckBoxMouseClicked(evt);
            }
        });
        jPanel17.add(shakeHandsCheckBox);

        shakeHandsPanel.add(jPanel17);

        shakeHandsPriceLabel.setText("$25.00");
        jPanel18.add(shakeHandsPriceLabel);

        shakeHandsPanel.add(jPanel18);

        tricksjPanel.add(shakeHandsPanel);

        playDeadPanel.setLayout(new java.awt.GridLayout());

        playDeadCheckBox.setText("Play Dead");
        playDeadCheckBox.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                playDeadCheckBoxMouseClicked(evt);
            }
        });
        jPanel19.add(playDeadCheckBox);

        playDeadPanel.add(jPanel19);

        playDeadPriceLabel.setText("$30.00");
        jPanel20.add(playDeadPriceLabel);

        playDeadPanel.add(jPanel20);

        tricksjPanel.add(playDeadPanel);

        skillsPanel.add(tricksjPanel);

        trainingPanel.setLayout(new java.awt.GridLayout(6, 1));

        trainingColumnLabel.setText("Training");
        trainingColumnTitlePanel.add(trainingColumnLabel);

        trainingPanel.add(trainingColumnTitlePanel);

        therapyPanel.setLayout(new java.awt.GridLayout());

        therapyCheckBox.setText("Therapy");
        therapyCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                therapyCheckBoxActionPerformed(evt);
            }
        });
        jPanel2.add(therapyCheckBox);

        therapyPanel.add(jPanel2);

        therapyPriceLabel.setText("$100.00");
        jPanel1.add(therapyPriceLabel);

        therapyPanel.add(jPanel1);

        trainingPanel.add(therapyPanel);

        agilityPanel.setLayout(new java.awt.GridLayout());

        agilityCheckBox.setText("Agility");
        jPanel3.add(agilityCheckBox);

        agilityPanel.add(jPanel3);

        agilityPriceLabel.setText("$80.00");
        jPanel4.add(agilityPriceLabel);

        agilityPanel.add(jPanel4);

        trainingPanel.add(agilityPanel);

        seeingPanel.setLayout(new java.awt.GridLayout());

        seeingCheckBox.setText("Seeing");
        jPanel5.add(seeingCheckBox);

        seeingPanel.add(jPanel5);

        seeingPriceLabel.setText("$100.00");
        jPanel6.add(seeingPriceLabel);

        seeingPanel.add(jPanel6);

        trainingPanel.add(seeingPanel);

        comfortPanel.setLayout(new java.awt.GridLayout());

        comfortCheckBox.setText("Comfort");
        jPanel7.add(comfortCheckBox);

        comfortPanel.add(jPanel7);

        comfortPrice.setText("$50.00");
        jPanel8.add(comfortPrice);

        comfortPanel.add(jPanel8);

        trainingPanel.add(comfortPanel);

        jPanel12.setLayout(new java.awt.GridLayout());

        jCheckBox14.setText("jCheckBox14");
        jPanel21.add(jCheckBox14);

        jPanel12.add(jPanel21);

        jLabel13.setText("jLabel13");
        jPanel22.add(jLabel13);

        jPanel12.add(jPanel22);

        trainingPanel.add(jPanel12);

        skillsPanel.add(trainingPanel);

        jTabbedPane1.addTab("Skills", skillsPanel);

        breedPanel.setLayout(new java.awt.GridLayout(3, 1));

        breedHeadPanel.setLayout(new java.awt.BorderLayout());

        breedHeadLabel.setText("Head:    ");
        breedHeadPanel.add(breedHeadLabel, java.awt.BorderLayout.WEST);

        breedHeadSelectPanel.setLayout(new java.awt.BorderLayout());

        jButton5.setPreferredSize(new java.awt.Dimension(50, 29));
        breedHeadSelectPanel.add(jButton5, java.awt.BorderLayout.WEST);

        jButton6.setPreferredSize(new java.awt.Dimension(50, 29));
        breedHeadSelectPanel.add(jButton6, java.awt.BorderLayout.EAST);
        breedHeadSelectPanel.add(jPanel24, java.awt.BorderLayout.CENTER);

        breedHeadPanel.add(breedHeadSelectPanel, java.awt.BorderLayout.CENTER);

        breedPanel.add(breedHeadPanel);

        breedTorsoPanel.setLayout(new java.awt.BorderLayout());

        breedTorsoLabel.setText("Torso:   ");
        breedTorsoPanel.add(breedTorsoLabel, java.awt.BorderLayout.WEST);

        breedTorsoSelectPanel.setLayout(new java.awt.BorderLayout());

        jButton1.setPreferredSize(new java.awt.Dimension(50, 29));
        breedTorsoSelectPanel.add(jButton1, java.awt.BorderLayout.WEST);
        breedTorsoSelectPanel.add(jPanel23, java.awt.BorderLayout.CENTER);

        jButton4.setPreferredSize(new java.awt.Dimension(50, 29));
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        breedTorsoSelectPanel.add(jButton4, java.awt.BorderLayout.EAST);

        breedTorsoPanel.add(breedTorsoSelectPanel, java.awt.BorderLayout.CENTER);

        breedPanel.add(breedTorsoPanel);

        breedLegsPanel.setLayout(new java.awt.BorderLayout());

        breedLegsLabel.setText("Legs:     ");
        breedLegsPanel.add(breedLegsLabel, java.awt.BorderLayout.WEST);
        breedLegsLabel.getAccessibleContext().setAccessibleName("Legs:    ");

        breedLegsSelectPanel.setLayout(new java.awt.BorderLayout());

        breedLegsLeftButton.setPreferredSize(new java.awt.Dimension(50, 29));
        breedLegsSelectPanel.add(breedLegsLeftButton, java.awt.BorderLayout.WEST);
        breedLegsSelectPanel.add(jPanel13, java.awt.BorderLayout.CENTER);

        breedLegsRightButton.setPreferredSize(new java.awt.Dimension(50, 29));
        breedLegsSelectPanel.add(breedLegsRightButton, java.awt.BorderLayout.EAST);

        breedLegsPanel.add(breedLegsSelectPanel, java.awt.BorderLayout.CENTER);

        breedPanel.add(breedLegsPanel);

        jTabbedPane1.addTab("Breed", breedPanel);

        ChimeraDesignPanel.add(jTabbedPane1, java.awt.BorderLayout.CENTER);

        cartPanel.setPreferredSize(new java.awt.Dimension(130, 280));
        cartPanel.setLayout(new java.awt.BorderLayout());

        cartScrollPanel.setPreferredSize(new java.awt.Dimension(150, 279));

        itemsPanel.setLayout(new java.awt.GridLayout(5, 0, 0, 5));

        CartHeadPanel.setLayout(new java.awt.GridLayout(3, 2));

        headLabel.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        headLabel.setText("Head:");
        CartHeadPanel.add(headLabel);
        CartHeadPanel.add(headSpaceFiller);
        CartHeadPanel.add(headChoiceLabel);

        headPriceLabel.setText("$0.00");
        CartHeadPanel.add(headPriceLabel);

        headBreedTitleLabel.setText("  Breed:");
        CartHeadPanel.add(headBreedTitleLabel);
        CartHeadPanel.add(headBreedLabel);

        itemsPanel.add(CartHeadPanel);

        CartTorsoPanel.setLayout(new java.awt.GridLayout(3, 2));

        torsoLabel.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        torsoLabel.setText("Torso:");
        CartTorsoPanel.add(torsoLabel);
        CartTorsoPanel.add(torsoSpaceFiller);
        CartTorsoPanel.add(torsoChoiceLabel);

        torsoPriceLabel.setText("$0.00");
        CartTorsoPanel.add(torsoPriceLabel);

        torsoBreedTitleLabel.setText("  Breed:");
        CartTorsoPanel.add(torsoBreedTitleLabel);
        CartTorsoPanel.add(torsoBreedLabel);

        itemsPanel.add(CartTorsoPanel);

        CartLegsPanel.setLayout(new java.awt.GridLayout(3, 2));

        legsLabel.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        legsLabel.setText("Legs:");
        CartLegsPanel.add(legsLabel);
        CartLegsPanel.add(legsSpaceFiller);
        CartLegsPanel.add(legsChoiceLabel);

        legsPriceLabel.setText("$0.00");
        CartLegsPanel.add(legsPriceLabel);

        legsBreedTitleLabel.setText("  Breed:");
        CartLegsPanel.add(legsBreedTitleLabel);
        CartLegsPanel.add(legsBreedLabel);

        itemsPanel.add(CartLegsPanel);

        CartTricksPanel.setLayout(new java.awt.GridLayout(2, 2));

        tricksLabel.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        tricksLabel.setText("Skills:");
        CartTricksPanel.add(tricksLabel);

        tricksPriceLabel.setText("$0.00");
        CartTricksPanel.add(tricksPriceLabel);

        tricksListPanel.setLayout(new java.awt.GridLayout(10, 1));
        CartTricksPanel.add(tricksListPanel);

        itemsPanel.add(CartTricksPanel);

        cartScrollPanel.setViewportView(itemsPanel);

        cartPanel.add(cartScrollPanel, java.awt.BorderLayout.CENTER);

        totalPanel.setPreferredSize(new java.awt.Dimension(150, 30));

        totalLabel.setText("Total:");
        totalPanel.add(totalLabel);

        totalPriceLabel.setText("jLabel3");
        totalPanel.add(totalPriceLabel);

        cartPanel.add(totalPanel, java.awt.BorderLayout.PAGE_END);

        ChimeraDesignPanel.add(cartPanel, java.awt.BorderLayout.EAST);

        CardPanel.add(ChimeraDesignPanel, "card2");

        getContentPane().add(CardPanel, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        personalityDialog.dispose();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void ChangeTorsoRightButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ChangeTorsoRightButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ChangeTorsoRightButtonActionPerformed

    private void DogButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_DogButtonMouseClicked
        this.switchToDesignPanel(goldenRetriever);
    }//GEN-LAST:event_DogButtonMouseClicked

    private void CatButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CatButtonMouseClicked
        this.switchToDesignPanel(calico);
    }//GEN-LAST:event_CatButtonMouseClicked

    private void RabbitButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_RabbitButtonMouseClicked
        this.switchToDesignPanel(rabbit);
    }//GEN-LAST:event_RabbitButtonMouseClicked

    private void ElephantButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ElephantButtonMouseClicked
        this.switchToDesignPanel(elephant);
    }//GEN-LAST:event_ElephantButtonMouseClicked

    private void BearButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BearButtonMouseClicked
        this.switchToDesignPanel(blackBear);
    }//GEN-LAST:event_BearButtonMouseClicked

    private void ChangeHeadLeftButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ChangeHeadLeftButtonMouseClicked
        Animal animal = this.cycleAnimals(current.head, "Backwards");
        current.head = animal;
        AnimalViewHeadLabel.setText(animal.name);
        headChoiceLabel.setText(animal.name);
        headPriceLabel.setText(formatPriceString(animal.headPrice));
        headBreedLabel.setText(animal.breed);
        this.setTotal();
    }//GEN-LAST:event_ChangeHeadLeftButtonMouseClicked

    private void ChangeTorsoLeftButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ChangeTorsoLeftButtonMouseClicked
        Animal animal = this.cycleAnimals(current.torso, "Backwards");
        current.torso = animal;
        AnimalViewTorsoLabel.setText(animal.name);
        torsoChoiceLabel.setText(animal.name);
        torsoPriceLabel.setText(formatPriceString(animal.torsoPrice));
        torsoBreedLabel.setText(animal.breed);
        this.setTotal();
    }//GEN-LAST:event_ChangeTorsoLeftButtonMouseClicked

    private void ChangeLegsLeftButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ChangeLegsLeftButtonMouseClicked
        Animal animal = this.cycleAnimals(current.legs, "Backwards");
        current.legs = animal;
        AnimalViewLegsLabel.setText(animal.name);
        legsChoiceLabel.setText(animal.name);
        legsPriceLabel.setText(formatPriceString(animal.legsPrice));
        legsBreedLabel.setText(animal.breed);
        this.setTotal();
    }//GEN-LAST:event_ChangeLegsLeftButtonMouseClicked

    private void ChangeHeadRightButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ChangeHeadRightButtonMouseClicked
        Animal animal = this.cycleAnimals(current.head, "Forwards");
        current.head = animal;
        AnimalViewHeadLabel.setText(animal.name);
        headChoiceLabel.setText(animal.name);
        headPriceLabel.setText(formatPriceString(animal.headPrice));
        headBreedLabel.setText(animal.breed);
        this.setTotal();
    }//GEN-LAST:event_ChangeHeadRightButtonMouseClicked

    private void ChangeTorsoRightButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ChangeTorsoRightButtonMouseClicked
        Animal animal = this.cycleAnimals(current.torso, "Forwards");
        current.torso = animal;
        AnimalViewTorsoLabel.setText(animal.name);
        torsoChoiceLabel.setText(animal.name);
        torsoPriceLabel.setText(formatPriceString(animal.torsoPrice));
        torsoBreedLabel.setText(animal.breed);
        this.setTotal();
    }//GEN-LAST:event_ChangeTorsoRightButtonMouseClicked

    private void ChangeLegsRightButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ChangeLegsRightButtonMouseClicked
        Animal animal = this.cycleAnimals(current.legs, "Forwards");
        current.legs = animal;
        AnimalViewLegsLabel.setText(animal.name);
        legsChoiceLabel.setText(animal.name);
        legsPriceLabel.setText(formatPriceString(animal.legsPrice));
        legsBreedLabel.setText(animal.breed);
        this.setTotal();
    }//GEN-LAST:event_ChangeLegsRightButtonMouseClicked

    private void stayCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stayCheckBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_stayCheckBoxActionPerformed

    private void therapyCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_therapyCheckBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_therapyCheckBoxActionPerformed

    private void sitCheckBoxMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sitCheckBoxMouseClicked

        if (sitCheckBox.isSelected()){
            String descr = "This skill will teach your pet to sit when told.";
            current.addSkill(sitCheckBox.getText(), 
                             priceStringToInt(sitPriceLabel.getText()), descr);
        } else {
            current.deleteSkill(sitCheckBox.getText());
        }
        this.setTotal();
    }//GEN-LAST:event_sitCheckBoxMouseClicked

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton4ActionPerformed

    private void stayCheckBoxMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_stayCheckBoxMouseClicked
        if (stayCheckBox.isSelected()){
            String descr = "This skill will teach your pet to stay when told.";
            current.addSkill(stayCheckBox.getText(), 
                             priceStringToInt(stayPriceLabel.getText()), descr);
        } else {
            current.deleteSkill(stayCheckBox.getText());
        }
        this.setTotal();
    }//GEN-LAST:event_stayCheckBoxMouseClicked

    private void comeCheckBoxMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_comeCheckBoxMouseClicked
        if (comeCheckBox.isSelected()){
            String descr = "This skill will teach your pet to come when told.";
            current.addSkill(comeCheckBox.getText(), 
                             priceStringToInt(comePriceLabel.getText()), descr);
        } else {
            current.deleteSkill(comeCheckBox.getText());
        }
        this.setTotal();
    }//GEN-LAST:event_comeCheckBoxMouseClicked

    private void shakeHandsCheckBoxMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_shakeHandsCheckBoxMouseClicked
        if (shakeHandsCheckBox.isSelected()){
            String descr = "This skill will teach your pet to shake your "
                    + "hand when told.";
            current.addSkill(shakeHandsCheckBox.getText(), 
                             priceStringToInt(shakeHandsPriceLabel.getText()), descr);
        } else {
            current.deleteSkill(shakeHandsCheckBox.getText());
        }
        this.setTotal();
    }//GEN-LAST:event_shakeHandsCheckBoxMouseClicked

    private void playDeadCheckBoxMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_playDeadCheckBoxMouseClicked
        if (playDeadCheckBox.isSelected()){
            String descr = "This skill will teach your pet to play dead when told.";
            current.addSkill(playDeadCheckBox.getText(), 
                             priceStringToInt(playDeadPriceLabel.getText()), descr);
        } else {
            current.deleteSkill(playDeadCheckBox.getText());
        }
        this.setTotal();
    }//GEN-LAST:event_playDeadCheckBoxMouseClicked

    private void switchToDesignPanel(Animal baseAnimal){
        CardLayout cl = (CardLayout)(CardPanel.getLayout());
        cl.next(CardPanel);
        
        current.head = baseAnimal;
        current.torso = baseAnimal;
        current.legs = baseAnimal;
        
        AnimalViewHeadLabel.setText(current.head.name);
        AnimalViewTorsoLabel.setText(current.torso.name);
        AnimalViewLegsLabel.setText(current.legs.name);
        headChoiceLabel.setText(current.head.name);
        headPriceLabel.setText(formatPriceString(current.head.headPrice));
        torsoChoiceLabel.setText(current.torso.name);
        torsoPriceLabel.setText(formatPriceString(current.torso.torsoPrice));
        legsChoiceLabel.setText(current.legs.name);
        legsPriceLabel.setText(formatPriceString(current.legs.legsPrice));
        headBreedLabel.setText(current.head.breed);
        torsoBreedLabel.setText(current.torso.breed);
        legsBreedLabel.setText(current.legs.breed);
        this.setTotal();
    }
    
    // Decides which animal is next in rotation
    // This should probably change from nested switch statements and use 
    // a doubly linked list or something
    private Animal cycleAnimals(Animal current, String direction){
        
        Animal result = goldenRetriever;
        
        if (direction.equals("Forwards")){
            switch (current.name){
                case "Dog":
                    result = calico;
                    break;
                case "Cat":
                    result = rabbit;
                    break;
                case "Rabbit":
                    result = elephant;
                    break;
                case "Elephant":
                    result = blackBear;
                    break;
                case "Bear":
                    result = goldenRetriever;
                    break;
            }
        } else if (direction.equals("Backwards")){
            switch (current.name){
                case "Dog":
                    result = blackBear;
                    break;
                case "Cat":
                    result = goldenRetriever;
                    break;
                case "Rabbit":
                    result = calico;
                    break;
                case "Elephant":
                    result = rabbit;
                    break;
                case "Bear":
                    result = elephant;
                    break;
            } 
        }
        
        return result;
        
    }
    
    // Takes price integer and returns string in dollar format
    private String formatPriceString(int price){
        String amt = Integer.toString(price);
        return "$" + amt + ".00";
    }
    
    // takes a price string and returns integer of equivalent value
    public int priceStringToInt(String price){
        String[] parts = price.split("\\.");
        return Integer.parseInt(parts[0].split("\\$", 2)[1]);
    }
    
    //sets the total amount for the current state of the creation
    private void setTotal(){
        this.current.computeTotal();
        totalPriceLabel.setText(formatPriceString(current.price));
    }
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Chimera.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Chimera.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Chimera.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Chimera.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Chimera().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel AnimalViewHeadLabel;
    private javax.swing.JPanel AnimalViewHeadPanel;
    private javax.swing.JLabel AnimalViewLegsLabel;
    private javax.swing.JPanel AnimalViewLegsPanel;
    private javax.swing.JPanel AnimalViewPanel;
    private javax.swing.JLabel AnimalViewTorsoLabel;
    private javax.swing.JPanel AnimalViewTorsoPanel;
    private javax.swing.JPanel BaseAnimalChoicePanel;
    private javax.swing.JButton BearButton;
    private javax.swing.JLabel BufferLabel;
    private javax.swing.JPanel BufferPanel;
    private javax.swing.JPanel CardPanel;
    private javax.swing.JPanel CartHeadPanel;
    private javax.swing.JPanel CartLegsPanel;
    private javax.swing.JPanel CartTorsoPanel;
    private javax.swing.JPanel CartTricksPanel;
    private javax.swing.JButton CatButton;
    private javax.swing.JPanel ChangeAnimalLeftPanel;
    private javax.swing.JPanel ChangeAnimalRightPanel;
    private javax.swing.JButton ChangeHeadLeftButton;
    private javax.swing.JButton ChangeHeadRightButton;
    private javax.swing.JButton ChangeLegsLeftButton;
    private javax.swing.JButton ChangeLegsRightButton;
    private javax.swing.JButton ChangeTorsoLeftButton;
    private javax.swing.JButton ChangeTorsoRightButton;
    private javax.swing.JPanel ChimeraChoosePanel;
    private javax.swing.JPanel ChimeraDesignPanel;
    private javax.swing.JPanel ChimeraEntryPanel;
    private javax.swing.JPanel ChimeraLogoPanel;
    private javax.swing.JLabel ChimeraNameLabel;
    private javax.swing.JPanel ChimeraWelcomePanel;
    private javax.swing.JLabel ChooseLabel;
    private javax.swing.JPanel ChooseTextPanel;
    private javax.swing.JButton DogButton;
    private javax.swing.JButton ElephantButton;
    private javax.swing.JButton RabbitButton;
    private javax.swing.JCheckBox agilityCheckBox;
    private javax.swing.JPanel agilityPanel;
    private javax.swing.JLabel agilityPriceLabel;
    private javax.swing.JLabel breedHeadLabel;
    private javax.swing.JPanel breedHeadPanel;
    private javax.swing.JPanel breedHeadSelectPanel;
    private javax.swing.JLabel breedLegsLabel;
    private javax.swing.JButton breedLegsLeftButton;
    private javax.swing.JPanel breedLegsPanel;
    private javax.swing.JButton breedLegsRightButton;
    private javax.swing.JPanel breedLegsSelectPanel;
    private javax.swing.JPanel breedPanel;
    private javax.swing.JLabel breedTorsoLabel;
    private javax.swing.JPanel breedTorsoPanel;
    private javax.swing.JPanel breedTorsoSelectPanel;
    private javax.swing.JPanel cartPanel;
    private javax.swing.JScrollPane cartScrollPanel;
    private javax.swing.JCheckBox comeCheckBox;
    private javax.swing.JPanel comePanel;
    private javax.swing.JLabel comePriceLabel;
    private javax.swing.JCheckBox comfortCheckBox;
    private javax.swing.JPanel comfortPanel;
    private javax.swing.JLabel comfortPrice;
    private javax.swing.JPanel designPanel;
    private javax.swing.JRadioButton docileRadioButton;
    private javax.swing.JLabel headBreedLabel;
    private javax.swing.JLabel headBreedTitleLabel;
    private javax.swing.JLabel headChoiceLabel;
    private javax.swing.JLabel headLabel;
    private javax.swing.JLabel headPriceLabel;
    private javax.swing.JLabel headSpaceFiller;
    private javax.swing.JPanel itemsPanel;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JCheckBox jCheckBox14;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel18;
    private javax.swing.JPanel jPanel19;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel20;
    private javax.swing.JPanel jPanel21;
    private javax.swing.JPanel jPanel22;
    private javax.swing.JPanel jPanel23;
    private javax.swing.JPanel jPanel24;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLabel legsBreedLabel;
    private javax.swing.JLabel legsBreedTitleLabel;
    private javax.swing.JLabel legsChoiceLabel;
    private javax.swing.JLabel legsLabel;
    private javax.swing.JLabel legsPriceLabel;
    private javax.swing.JLabel legsSpaceFiller;
    private javax.swing.ButtonGroup personalityButtonGroup;
    private javax.swing.JDialog personalityDialog;
    private javax.swing.JPanel personalityPanel;
    private javax.swing.JCheckBox playDeadCheckBox;
    private javax.swing.JPanel playDeadPanel;
    private javax.swing.JLabel playDeadPriceLabel;
    private javax.swing.JCheckBox seeingCheckBox;
    private javax.swing.JPanel seeingPanel;
    private javax.swing.JLabel seeingPriceLabel;
    private javax.swing.JCheckBox shakeHandsCheckBox;
    private javax.swing.JPanel shakeHandsPanel;
    private javax.swing.JLabel shakeHandsPriceLabel;
    private javax.swing.JCheckBox sitCheckBox;
    private javax.swing.JPanel sitPanel;
    private javax.swing.JLabel sitPriceLabel;
    private javax.swing.JPanel skillsPanel;
    private javax.swing.JCheckBox stayCheckBox;
    private javax.swing.JPanel stayPanel;
    private javax.swing.JLabel stayPriceLabel;
    private javax.swing.JCheckBox therapyCheckBox;
    private javax.swing.JPanel therapyPanel;
    private javax.swing.JLabel therapyPriceLabel;
    private javax.swing.JLabel torsoBreedLabel;
    private javax.swing.JLabel torsoBreedTitleLabel;
    private javax.swing.JLabel torsoChoiceLabel;
    private javax.swing.JLabel torsoLabel;
    private javax.swing.JLabel torsoPriceLabel;
    private javax.swing.JLabel torsoSpaceFiller;
    private javax.swing.JLabel totalLabel;
    private javax.swing.JPanel totalPanel;
    private javax.swing.JLabel totalPriceLabel;
    private javax.swing.JLabel trainingColumnLabel;
    private javax.swing.JPanel trainingColumnTitlePanel;
    private javax.swing.JPanel trainingPanel;
    private javax.swing.JLabel trickColumnLabel;
    private javax.swing.JPanel trickColumnTitlePanel;
    private javax.swing.JLabel tricksLabel;
    private javax.swing.JPanel tricksListPanel;
    private javax.swing.JLabel tricksPriceLabel;
    private javax.swing.JPanel tricksjPanel;
    // End of variables declaration//GEN-END:variables

    // Represents a customa Chimera Creation currently being assembled
    private class ChimeraCreation{
        
        Animal head;
        Animal torso;
        Animal legs;
        int price;
        String temperament;
        String energyLevel;
        ArrayList<Skill> skills;
        
        public ChimeraCreation(Animal head, Animal torso, Animal legs, 
                               String temperament, String energyLevel, 
                               ArrayList<Skill> skills){
            this.head = head;
            this.torso = torso;
            this.legs = legs;
            this.price = 0;
            this.temperament = temperament;
            this.energyLevel = energyLevel;
            this.skills = skills;
            
            computeTotal();
        }
        
        // computes total for creation based on price of head, torso, legs,
        // and skills
        public void computeTotal(){
            this.price = this.head.headPrice + this.torso.torsoPrice 
                         + this.legs.legsPrice + computeSkillsTotal();
        }
        
        // computes the price of all the skills chosen for the creation
        private int computeSkillsTotal(){
            int total = 0;
            if (this.skills.size() > 0){
                for (Skill skill : this.skills) {
                    total += skill.price;
                }
            }
            return total;
        }
        
        public void addSkill(String skillName, int price, String descr){
            Skill skill = new Skill(skillName, price, descr, new JLabel(skillName));
            this.skills.add(skill);
            tricksListPanel.add(skill.label);
            tricksPriceLabel.setText(formatPriceString(computeSkillsTotal()));
        }
        
        public void deleteSkill(String skillName){
            if (this.skills.size() > 0){
                for (int i=0; i<this.skills.size(); i++) {
                    Skill skill = this.skills.get(i);
                    if (skill.name.equals(skillName)){
                        this.skills.remove(i);
                        tricksListPanel.remove(skill.label);
                        tricksPriceLabel.setText(formatPriceString(computeSkillsTotal()));
                        break;
                    }
                }
            }
        }
        
        
    }
    
    // Represents an animal that can be selected for a Chimera Creation
    // body part
    private class Animal{
        
        String name;
        String breed;
        int headPrice;
        int torsoPrice;
        int legsPrice;
        
        public Animal(String name, String breed, int headPrice,
                      int torsoPrice, int legsPrice){
            this.name = name;
            this.breed = breed;
            this.headPrice = headPrice;
            this.torsoPrice = torsoPrice;
            this.legsPrice = legsPrice;
        }
        
    }
    
    // represents a skill that a Chimera Creation can have
    private class Skill{
        
        String name;
        int price;
        String description;
        JLabel label;
        
        public Skill(String name, int price, String description,
                     JLabel label){
            this.name = name;
            this.price = price;
            this.description = description;
            this.label = label;
        }
        
    }
    
}
